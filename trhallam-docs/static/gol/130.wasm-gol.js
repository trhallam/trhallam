"use strict";(self.webpackChunkwasm_rust_gol_ts=self.webpackChunkwasm_rust_gol_ts||[]).push([[130],{130:(t,e,i)=>{i.a(t,(async(t,r)=>{try{i.r(e);var s=i(841),n=i(110),h=t([s,n]);[s,n]=h.then?(await h)():h;class _{drawGrid(){let t=this.ctx;t.beginPath(),t.strokeStyle=this.GRID_COLOR;for(let e=0;e<=this.width;e++)t.moveTo(e*(this.CELL_SIZE+1)+1,0),t.lineTo(e*(this.CELL_SIZE+1)+1,(this.CELL_SIZE+1)*this.height+1);for(let e=0;e<=this.height;e++)t.moveTo(0,e*(this.CELL_SIZE+1)+1),t.lineTo((this.CELL_SIZE+1)*this.width+1,e*(this.CELL_SIZE+1)+1);t.stroke()}constructor(t){this.CELL_SIZE=5,this.GRID_COLOR="#CCCCCC",this.DEAD_COLOR="#FFFFFF",this.ALIVE_COLOR="#000000",this.getIndex=(t,e)=>t*this.width+e,this.drawCells=()=>{let t=this.universe.cells(),e=new Uint8Array(n.memory.buffer,t,this.width*this.height);this.ctx.beginPath();for(let t=0;t<this.height;t++)for(let i=0;i<this.width;i++){let r=this.getIndex(t,i);this.ctx.fillStyle=e[r]===s.fh.Dead?this.DEAD_COLOR:this.ALIVE_COLOR,this.ctx.fillRect(i*(this.CELL_SIZE+1)+1,t*(this.CELL_SIZE+1)+1,this.CELL_SIZE,this.CELL_SIZE)}this.ctx.stroke()},this.universe=s._D.new(),this.width=this.universe.width(),this.height=this.universe.height();let e=document.getElementById(t),i=e.getContext("2d");e.height=(this.CELL_SIZE+1)*this.height+1,e.width=(this.CELL_SIZE+1)*this.width+1,this.canvas=e,this.ctx=i}tick(){this.universe.tick()}}const a=new _("game-of-life-canvas"),o=()=>{a.tick(),a.drawGrid(),a.drawCells(),new Promise((t=>setTimeout(t,100))).then((()=>{requestAnimationFrame(o)}))};requestAnimationFrame(o),r()}catch(t){r(t)}}))},841:(t,e,i)=>{i.a(t,(async(t,r)=>{try{i.d(e,{_D:()=>n._D,fh:()=>n.fh});var s=i(110),n=i(411),h=t([s]);s=(h.then?(await h)():h)[0],(0,n.lI)(s),r()}catch(t){r(t)}}))},411:(t,e,i)=>{let r;function s(t){r=t}i.d(e,{Qn:()=>c,_D:()=>u,fh:()=>l,lI:()=>s});let n=new("undefined"==typeof TextDecoder?(0,module.require)("util").TextDecoder:TextDecoder)("utf-8",{ignoreBOM:!0,fatal:!0});n.decode();let h=null;function _(t,e){return t>>>=0,n.decode((null!==h&&0!==h.byteLength||(h=new Uint8Array(r.memory.buffer)),h).subarray(t,t+e))}let a=null;function o(){return(null===a||!0===a.buffer.detached||void 0===a.buffer.detached&&a.buffer!==r.memory.buffer)&&(a=new DataView(r.memory.buffer)),a}const l=Object.freeze({Dead:0,0:"Dead",Alive:1,1:"Alive"}),d="undefined"==typeof FinalizationRegistry?{register:()=>{},unregister:()=>{}}:new FinalizationRegistry((t=>r.__wbg_universe_free(t>>>0,1)));class u{static __wrap(t){t>>>=0;const e=Object.create(u.prototype);return e.__wbg_ptr=t,d.register(e,e.__wbg_ptr,e),e}__destroy_into_raw(){const t=this.__wbg_ptr;return this.__wbg_ptr=0,d.unregister(this),t}free(){const t=this.__destroy_into_raw();r.__wbg_universe_free(t,0)}tick(){r.universe_tick(this.__wbg_ptr)}static new(){const t=r.universe_new();return u.__wrap(t)}render(){let t,e;try{const n=r.__wbindgen_add_to_stack_pointer(-16);r.universe_render(n,this.__wbg_ptr);var i=o().getInt32(n+0,!0),s=o().getInt32(n+4,!0);return t=i,e=s,_(i,s)}finally{r.__wbindgen_add_to_stack_pointer(16),r.__wbindgen_free(t,e,1)}}width(){return r.universe_width(this.__wbg_ptr)>>>0}height(){return r.universe_height(this.__wbg_ptr)>>>0}cells(){return r.universe_cells(this.__wbg_ptr)>>>0}}function c(t,e){throw new Error(_(t,e))}},110:(t,e,i)=>{var r=i(411);t.exports=i.v(e,t.id,"72dcf0a7908143605945",{"./wasm_rust_gol_bg.js":{__wbindgen_throw:r.Qn}})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,